## makeCacheMatrix creates a special "matrix" object that can cache its inverse while 
##cacheSolve() computes the inverse of the "matrix" returned by makeCacheMatrix()

## makeCacheMatrix returns a list containing functions to get & set a matrix and its inverse

makeCacheMatrix <- function(x = matrix()) {
inv = NULL
set = function(y) {
x <<- y
inv <<- NULL
}
get = function() x
setinv = function(inverse) inv <<- inverse 
getinv = function() inv
list(set=set, get=get, setinv=setinv, getinv=getinv)
}


##cacheSolve inputs the inverse of the original matrix to makeCacheMatrix()
cacheSolve <- function(x, ...) {
inv = x$getinv()
if (!is.null(inv)){
message("getting cached data")
return(inv)
}
mat.data = x$get()
inv = solve(mat.data, ...)
x$setinv(inv)
return(inv)
}
